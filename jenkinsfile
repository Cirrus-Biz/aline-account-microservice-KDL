pipeline {

    agent {
        node {
            label 'dev-node'
        }
    }

    environment{
        COMMIT = ""
        DATE = new Date().format('M-yy')
        githubtoken = credentials("Github-token-KDL")
        AWS_ACCESS_KEY = credentials("KDL-SECRET-KEY")
        AWS_SECRET_ACCESS_KEY = credentials("KDL-SECRET-KEY-2")
        AWS_PROFILE_KDL1 = credentials("KDL-AWS-PROFILE")
        DOCKER_USERNAME_KDL = credentials("Docker-username-KDL")
        DOCKER_PASSWORD_KDL = credentials("Docker-Password-KDL")
        THE_BUTLER_SAYS_SO=credentials('AWS-KDL')

    }

    stages {
        // stage('SonarQube Analysis') {
        //     steps{
        //         script{
        //             withSonarQubeEnv(installationName: "sonarqube") {
        //                 sh "mvn clean test verify sonar:sonar -Dsonar.projectKey=account-microservice-kdl"
        //                 }
        //         }

        //     }       
        // }

        // stage('Quality Gate Check'){
        //     steps{
        //         script{
        //              timeout(time: 2, unit: 'MINUTES'){
        //                 def qg = waitForQualityGate()
        //                 if(qg.status != 'OK'){
        //                     error "Pipeline aborted due to quality gate failure"
        //             }
        //              }

        //             }
        //         }
                
        //     }
        
        // stage("Build w/MVN") {
        //     steps {
        //         sh "mvn clean package -Dskiptests"
        //     }
        // }


        // stage("Build Image w/docker"){
        //     steps{
        //         script{
        //             COMMIT = "${GIT_COMMIT}"
        //             SLICE = COMMIT[1..7]
        //             sh "sudo docker build -t $env.AWS_ECR_REGISTRY_WEST/account-microservice-kdl:${SLICE}.${BUILD_NUMBER}.${DATE} ."
        //             sh "sudo docker build -t $env.AWS_ECR_REGISTRY_WEST/account-microservice-kdl:${SLICE}.${BUILD_NUMBER}.${DATE} ."
        //         }
                

        //     }            
        // }

        // stage("Publish to AWS"){
        //     steps{
        //         script{
        //             COMMIT = "${GIT_COMMIT}"
        //             SLICE = COMMIT[1..7]
        //            docker.withRegistry("https://$env.AWS_ECR_REGISTRY_WEST", "ecr:$env.AWS_REGION_WEST:AWS-KDL"){
        //                docker.image("$env.AWS_ECR_REGISTRY_WEST/account-microservice-kdl:${SLICE}.${BUILD_NUMBER}.${DATE}").push()
        //                docker.image("$env.AWS_ECR_REGISTRY_WEST/account-microservice-kdl:${SLICE}.${BUILD_NUMBER}.${DATE}").push("latest")
        //            }
        //         }
        //     }
        // }

        stage("Grab docker compose file"){
            steps {

                sh "curl -H 'Authorization: token ${githubtoken}' https://raw.githubusercontent.com/Cirrus-Biz/DevOPS-KDL/dev/AWS/docker-compose.yaml -o docker-compose.yaml"
            }
        }

        // stage ("docker/AWS cli login"){
        //     steps{
        //         script{
        //             sh "echo ${DOCKER_PASSWORD_KDL} | docker login --username ${DOCKER_USERNAME_KDL} --password-stdin"



        //         sh "docker context use default" 

        //         sh "aws configure set aws_access_key_id ${AWS_ACCESS_KEY} --profile KDL-AWS-PROFILE"

        //         sh "aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} --profile KDL-AWS-PROFILE"

        //         sh "aws configure set default.region ${AWS_REGION_WEST} --profile KDL-AWS-PROFILE" 

        //         sh "aws configure set output json --profile KDL-AWS-PROFILE"

        //         sh "export AWS_PROFILE=KDL-AWS-PROFILE"

        //         sh "aws ecr get-login-password --region ${AWS_REGION_WEST} | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_WEST}"                
        //         }
        //     }
        // }


        stage("docker compose up"){
            steps{
                script{ 
                sh "docker context use default" 
            
                sh "aws configure set aws_access_key_id ${AWS_ACCESS_KEY} --profile KDL-AWS-PROFILE"

                sh "aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} --profile KDL-AWS-PROFILE"

                sh "aws configure set region ${AWS_REGION_WEST} --profile KDL-AWS-PROFILE" 

                sh "aws configure set output json --profile KDL-AWS-PROFILE"

                sh "export AWS_PROFILE=KDL-AWS-PROFILE"     

                // sh "echo ${DOCKER_PASSWORD_KDL} | docker login --username ${DOCKER_USERNAME_KDL} --password-stdin"

                // sh "aws ecr get-login-password --region ${AWS_REGION_WEST} | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_WEST}"   

                // sh "aws configure get region"          
                
                // sh "docker context create ecs kdl-ecs --from-env"
      

             
                sh "docker context use kdl-ecs"
                sh "export AWS_PROFILE=KDL-AWS-PROFILE"
                sh "docker compose up -d --no-color --wait"

                   
                }

            }

        }


    }

    post {
        always{
            sh "docker context use default"
            // sh "sudo docker system prune --all -f"
            // sh "sudo docker logout"
            // sh "sudo rm -rf ~/.aws/"
            // sh "sudo rm -rf ~/.sonar/*"
            // sh 'sudo rm -rf ~/jenkins/workspace/${JOB_NAME}/*'
            // sh 'sudo rm -rf ~/jenkins/workspace/${JOB_NAME}/.git*'
            // sh "aws configure set default.region ${AWS_REGION}" 
            sh "docker context rm kdl-ecs"
        }
    }
}

